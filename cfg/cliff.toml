# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organised into tables and keys.
# See documentation for more information on available options.

[changelog]
# changelog header
header = "# Changelog\n\n"
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## {{ version | trim_start_matches(pat="v") }}
    **{{ timestamp | date(format="%Y-%m-%d") }}**
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing white-space from the template
trim = true
# changelog footer
footer = """
"""
# post processors
postprocessors = [
  # { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" }, # replace repository URL
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for pre processing the commit messages
commit_preprocessors = [
  # { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"}, # replace issue numbers
]
# regex for parsing and grouping commits
commit_parsers = [
  # increment major version
  { message = "^feat!", group = "BREAKING CHANGES" },
  # increment minor version
  { message = "^feat.*: new", group = "New Features" },
  { message = "^feat.*: deprecate", group = "Deprecated Features" },
  { message = "^feat", group = "Updated Features" },
  { message = "^refactor", group = "Refactored Features" },
  { message = "^defect", group = "Corrected Defects" },
  # increment patch version
  { message = "^dep", group = "Dependencies" },
  { message = "^doc", group = "Documentation" },
  { message = "^perf", group = "Performance Enhancements"},
  { message = "^sec", group = "Security Enhancements"},
  { message = "^style", group = "Stylistic & Idiomatic Enhancements" },
  # no increment
  { message = "^cicd", group = "Pipeline Artefacts" },
  { message = "^build", group = "Build Artefacts" },
  { message = "^meta", group = "Meta Artefacts" },
  { message = "^test", group = "Test Artefacts" },
  # ignored
  { message = "^chore", skip = true },
  { message = "^merge", skip = true },
  { message = "^wip", skip = true },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = true
# filter out the commits that are not matched by commit parsers
filter_commits = true
# regex for matching git tags
# tag_pattern = "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
tag_pattern = "^v[0-9]+\\.[0-9]+\\.[0-9]+(-(alpha|beta)\\.[1-9]+[0-9]*$)?"
# regex for skipping tags
skip_tags = ""
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42
